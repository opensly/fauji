#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath, pathToFileURL } from 'url';

process.title = 'fauji';

// Polyfill __dirname in ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Helper to print usage
function printHelp() {
  console.log(`\nUsage: fauji [options]\n\nOptions:\n  -d, --dir <directory>      Directory to run tests in\n  -p, --pattern <pattern>    Pattern to match test files\n  -n, --name <name>          Name of the test to run\n  -w, --watch                Watch files for changes\n  --coverage                 Collect code coverage\n  --parallel <num>           Run test files in parallel (default: # of CPUs)\n  --env <env>                Test environment (node|jsdom)\n  --config <file>            Path to config file\n  -h, --help                 Show help\n  -v, --version              Show version\n`);
}

// Helper to print version
function printVersion() {
  try {
    const pkg = JSON.parse(fs.readFileSync(path.join(__dirname, '../package.json'), 'utf8'));
    console.log(pkg.version);
  } catch (e) {
    console.log('Unknown version');
  }
}

// Parse CLI arguments
const args = process.argv.slice(2);
const options = {};
let configFile;

for (let i = 0; i < args.length; i++) {
  const arg = args[i];
  if (arg === '--dir' || arg === '-d') {
    options.dir = args[i + 1];
    i++;
  } else if (arg === '--pattern' || arg === '-p') {
    options.pattern = args[i + 1];
    i++;
  } else if (arg === '--name' || arg === '-n') {
    options.name = args[i + 1];
    i++;
  } else if (arg === '--watch' || arg === '-w') {
    options.watch = true;
  } else if (arg === '--coverage') {
    options.coverage = true;
  } else if (arg === '--parallel') {
    options.parallel = parseInt(args[i + 1], 10) || true;
    i++;
  } else if (arg === '--env') {
    options.env = args[i + 1];
    i++;
  } else if (arg === '--config') {
    configFile = args[i + 1];
    i++;
  } else if (arg === '--help' || arg === '-h') {
    printHelp();
    process.exit(0);
  } else if (arg === '--version' || arg === '-v') {
    printVersion();
    process.exit(0);
  } else {
    console.log(`Unknown option: ${arg}`);
    printHelp();
    process.exit(1);
  }
}

// Load config file if present
const cwd = process.cwd();
let config = {};
const configPath = path.join(cwd, 'fauji.config.json');
if (!fs.existsSync(configPath)) {
  console.error('Error: fauji.config.json not found in the project root. Please create one to configure Fauji.');
  process.exit(1);
}
let targetDir, testMatch;
const allowedPatterns = [
  '**.test.js', 
  '**.spec.js', 
  '**.test.ts', 
  '**.spec.ts',
  '**/*.test.js', 
  '**/*.spec.js', 
  '**/*.test.ts', 
  '**/*.spec.ts'
];
if (fs.existsSync(configPath)) {
  try {
    config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
    if (!config.sourceDirectory || !config.testMatch) {
      throw new Error('fauji.config.json must specify both "sourceDirectory" and "testMatch" properties.');
    }
    if (!Array.isArray(config.testMatch) || config.testMatch.some(p => !allowedPatterns.includes(p))) {
      throw new Error('fauji.config.json "testMatch" must be an array of allowed patterns: ' + allowedPatterns.join(', '));
    }
    targetDir = config.sourceDirectory === '.' ? cwd : path.join(cwd, config.sourceDirectory);
    testMatch = config.testMatch;
  } catch (e) {
    console.error('Failed to load config file:', configPath, e);
    process.exit(1);
  }
}
// Merge CLI options (CLI takes precedence)
const runnerConfig = { targetDir, testMatch, ...options };

// Try to import dist build only; if it fails, print a clear error and exit
// Determine which build to import: ESM (.mjs) or CJS (.cjs)
let mainRunner;
try {
  let mainPath;
  // If the process was spawned as ESM, use esm/index.mjs; if CJS, use cjs/index.cjs
  if (process.env.FAUJI_FORCE_CJS) {
    mainPath = path.join(__dirname, '../dist/cjs/index.cjs');
  } else {
    mainPath = path.join(__dirname, '../dist/esm/index.mjs');
  }
  const imported = await import(pathToFileURL(mainPath).href);
  mainRunner = imported.runner;
} catch (e) {
  console.error('Failed to load Fauji test runner from dist build.');
  console.error('This likely means the package was not built correctly or is missing files.');
  console.error(e);
  process.exit(1);
}

mainRunner(runnerConfig);