#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

process.title = 'fauji';

// Helper to print usage
function printHelp() {
  console.log(`\nUsage: fauji [options]\n\nOptions:\n  -d, --dir <directory>      Directory to run tests in\n  -p, --pattern <pattern>    Pattern to match test files\n  -n, --name <name>          Name of the test to run\n  -w, --watch                Watch files for changes\n  --coverage                 Collect code coverage\n  --parallel <num>           Run test files in parallel (default: # of CPUs)\n  --env <env>                Test environment (node|jsdom)\n  --config <file>            Path to config file\n  -h, --help                 Show help\n  -v, --version              Show version\n`);
}

// Helper to print version
function printVersion() {
  try {
    const pkg = JSON.parse(fs.readFileSync(path.join(__dirname, '../package.json'), 'utf8'));
    console.log(pkg.version);
  } catch (e) {
    console.log('Unknown version');
  }
}

// Parse CLI arguments
const args = process.argv.slice(2);
const options = {};
let configFile;

for (let i = 0; i < args.length; i++) {
  const arg = args[i];
  if (arg === '--dir' || arg === '-d') {
    options.dir = args[i + 1];
    i++;
  } else if (arg === '--pattern' || arg === '-p') {
    options.pattern = args[i + 1];
    i++;
  } else if (arg === '--name' || arg === '-n') {
    options.name = args[i + 1];
    i++;
  } else if (arg === '--watch' || arg === '-w') {
    options.watch = true;
  } else if (arg === '--coverage') {
    options.coverage = true;
  } else if (arg === '--parallel') {
    options.parallel = parseInt(args[i + 1], 10) || true;
    i++;
  } else if (arg === '--env') {
    options.env = args[i + 1];
    i++;
  } else if (arg === '--config') {
    configFile = args[i + 1];
    i++;
  } else if (arg === '--help' || arg === '-h') {
    printHelp();
    process.exit(0);
  } else if (arg === '--version' || arg === '-v') {
    printVersion();
    process.exit(0);
  } else {
    console.log(`Unknown option: ${arg}`);
    printHelp();
    process.exit(1);
  }
}

// Load config file if present
const cwd = process.cwd();
let config = {};
if (!configFile) {
  if (fs.existsSync(path.join(cwd, 'fauji.config.js'))) configFile = path.join(cwd, 'fauji.config.js');
  else if (fs.existsSync(path.join(cwd, 'fauji.config.json'))) configFile = path.join(cwd, 'fauji.config.json');
}
if (configFile) {
  try {
    config = require(configFile);
    if (config.default) config = config.default; // handle ES module
  } catch (e) {
    console.error('Failed to load config file:', configFile, e);
    process.exit(1);
  }
}
// Merge CLI options (CLI takes precedence)
const finalOptions = { ...config, ...options };

// Try to require dist build, fallback to src for dev
let mainRunner;
try {
  mainRunner = require('../dist/index.js').runner;
} catch (e) {
  mainRunner = require('../src/run-assertions/runner');
}

mainRunner(finalOptions);